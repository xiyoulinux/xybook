#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Wed Dec  3 03:13:36 2008

import wx
import wx.grid
import os
import os.path
import search
import sys, glob, random
import data
#import find

# begin wxGlade: extracode
# end wxGlade



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Tool Bar
        self.frame_1_toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.frame_1_toolbar)
        t1 = self.frame_1_toolbar.AddLabelTool(wx.NewId(), u"整理", wx.Bitmap("./picture/1.jpeg", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        t2 = self.frame_1_toolbar.AddLabelTool(wx.NewId(), u"关于", wx.Bitmap("./picture/2.jpeg", wx.BITMAP_TYPE_ANY), wx.Bitmap("./picture/2.jpeg", wx.BITMAP_TYPE_ANY), wx.ITEM_NORMAL, "", "")
        # Tool Bar end
        self.label_1 = wx.StaticText(self, -1, u"路径", style=wx.ALIGN_CENTRE)
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "")
        self.label_2 = wx.StaticText(self, -1, u"文件类型\n", style=wx.ALIGN_CENTRE)
        self.text_ctrl_2 = wx.TextCtrl(self, -1, "")
        self.button_1 = wx.Button(self, -1, u"开始搜索")
        self.label_3 = wx.StaticText(self, -1, u"请输入关键字", style=wx.ALIGN_CENTRE)
        self.text_ctrl_3 = wx.TextCtrl(self, -1, "")
        self.button_2 = wx.Button(self, -1, u"搜索关键字")
        self.list_box_1 = wx.ListBox(self, -1, choices=[item for item in os.listdir(os.getcwd()) if os.path.splitext(item)[1] in ('.list',)])


#--------------------------------------------------------------------------------------------------------------
#listctrl
        il = wx.ImageList(16,16, True)
        for name in glob.glob("smicon??.png"):
            bmp = wx.Bitmap(name, wx.BITMAP_TYPE_PNG)
            il_max = il.Add(bmp)
        self.list = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        self.list.AssignImageList(il, wx.IMAGE_LIST_SMALL)

        # Add some columns
        for col, text in enumerate(data.columns):
            self.list.InsertColumn(col, text)

        # add the rows
        for item in data.rows:
            index = self.list.InsertStringItem(sys.maxint, item[0])
            for col, text in enumerate(item[1:]):
                self.list.SetStringItem(index, col+1, text)

            # give each item a random image
            img = random.randint(0, il_max)
            self.list.SetItemImage(index, img, img)
                
        # set the width of the columns in various ways
        self.list.SetColumnWidth(0, 120)
        self.list.SetColumnWidth(1, wx.LIST_AUTOSIZE)
#        self.list.SetColumnWidth(2, wx.LIST_AUTOSIZE)
#        self.list.SetColumnWidth(3, wx.LIST_AUTOSIZE_USEHEADER)
#-------------------------------------------------------------------------------------------------------------


        self.Bind(wx.EVT_LISTBOX, self.ButtonClick, self.list_box_1)
        self.list.Bind(wx.EVT_CONTEXT_MENU, self.OnContextMenu)


        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.move, t1)
        self.Bind(wx.EVT_TOOL, self.About, t2)
        self.Bind(wx.EVT_BUTTON, self.search, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.find, self.button_2)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_1")
        self.SetSize((900, 650))
        self.frame_1_toolbar.Realize()
 
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.label_1, 1, wx.EXPAND, 0)
        sizer_4.Add(self.text_ctrl_1, 6, wx.EXPAND, 0)
        sizer_4.Add(self.label_2, 1, wx.EXPAND, 0)
        sizer_4.Add(self.text_ctrl_2, 6, wx.EXPAND, 0)
        sizer_4.Add(self.button_1, 2, wx.ALL|wx.EXPAND, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 5)
        sizer_5.Add(self.label_3, 3, wx.EXPAND, 0)
        sizer_5.Add(self.text_ctrl_3, 15, wx.EXPAND, 0)
        sizer_5.Add(self.button_2, 2, wx.EXPAND, 0)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 5)
        sizer_3.Add(self.list_box_1, 1, wx.EXPAND, 0)
#        sizer_3.Add(self.grid_1, 4, wx.EXPAND, 0)
        sizer_3.Add(self.list, 4, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 20, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade


    def ButtonClick(self, event):
        n=self.list_box_1.GetSelection()
        sampleList = [item for item in os.listdir(os.getcwd()) if os.path.splitext(item)[1] in ('.list',)]
        f = open(sampleList[n],'r')
        data.rows=[(os.path.splitext(os.path.basename(line))[0],line)for line in f]
        f.close()
#--------------------------------------------------------------------------------------------------------------
#listctrl
        self.list.Destroy()
        il = wx.ImageList(16,16, True)
        for name in glob.glob("smicon??.png"):
            bmp = wx.Bitmap(name, wx.BITMAP_TYPE_PNG)
            il_max = il.Add(bmp)
        self.list = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        self.list.AssignImageList(il, wx.IMAGE_LIST_SMALL)
        self.__do_layout()
        # Add some columns
        for col, text in enumerate(data.columns):
            self.list.InsertColumn(col, text)

        # add the rows
        for item in data.rows:
            index = self.list.InsertStringItem(sys.maxint, item[0])
            for col, text in enumerate(item[1:]):
                self.list.SetStringItem(index, col+1, text)

            # give each item a random image
            img = random.randint(0, il_max)
            self.list.SetItemImage(index, img, img)
                
        # set the width of the columns in various ways
        self.list.SetColumnWidth(0, 120)
        self.list.SetColumnWidth(1, wx.LIST_AUTOSIZE)
#        self.list.SetColumnWidth(2, wx.LIST_AUTOSIZE)
#        self.list.SetColumnWidth(3, wx.LIST_AUTOSIZE_USEHEADER)
        self.list.Bind(wx.EVT_CONTEXT_MENU, self.OnContextMenu)
#-------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------
#右键菜单

    def OnContextMenu(self, event):
#        if not hasattr(self, "popupStop"):
#            self.popupStop = wx.NewId()
#            self.popupPropery = wx.NewId()
#            self.Bind(wx.EVT_MENU, self.OnPopupStop, id = self.popupStop)
#            self.Bind(wx.EVT_MENU, self.OnPopupProperty, id = self.popupPropery)
        self.popupStop = wx.NewId()
        self.popupPropery = wx.NewId()
        # 创建菜单
        menu = wx.Menu()
        itemStop = wx.MenuItem(menu, self.popupStop, "Stop")
        itemProperty = wx.MenuItem(menu, self.popupPropery, 'Property')
        
        menu.AppendItem(itemStop)
        menu.AppendItem(itemProperty)

        itemProperty.Enable(False)#默认让属性按钮变成无效状态
        itemid = self.list.GetFirstSelected()
#		while itemid != -1:
#        #Do something
#        	itemid = self.list.GetNextSelected(itemid)
        if itemid == -1:#如果没有选中任何项
            itemStop.Enable(False)
        else:
            itemStop.Enable(False)
            itemProperty.Enable(True)
        print itemid
        #到这里才弹出菜单
#        self.Bind(wx.EVT_MENU, self.Property(), itemProperty)################怎样绑定？？？？？
        self.PopupMenu(menu)

        #最后注意销毁前面创建的菜单
        menu.Destroy()

    def Property(self,event,itemid):
		print itemid
#-------------------------------------------------------------------------------------------------------------


    def search(self, event): # wxGlade: MyFrame.<event_handler>
        path = self.text_ctrl_1.GetValue()
        format = self.text_ctrl_2.GetValue()
        
        print path
        print format
        if path == '' and format == '':
            wx.MessageBox("请输入路径和想要搜索的格式")
        elif  path == '':
            wx.MessageBox("请输入路径")
        elif format == '':
            wx.MessageBox("请输入想要搜索的格式")  
           
        if path != '' and format != '':
 #       	fp = open("list.list",'w')
            search.searcher(path, format) 
  #          fp.close()
        event.Skip()

    def find(self, event): # wxGlade: MyFrame.<event_handler>
        key = self.text_ctrl_3.GetValue()
        fp = open("list.list", 'r')
        bo=[]
        count=0
        for line in fp:
            if key in line:
                count+=1
                bo.append(line)
        if count==0:
             bo.append('Sorry,the book does not exist!')
        fp.close() 
        data.rows=[(os.path.splitext(os.path.basename(line))[0],line)for line in bo]

#--------------------------------------------------------------------------------------------------------------
#listctrl
        self.list.Destroy()
        il = wx.ImageList(16,16, True)
        for name in glob.glob("smicon??.png"):
            bmp = wx.Bitmap(name, wx.BITMAP_TYPE_PNG)
            il_max = il.Add(bmp)
        self.list = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        self.list.AssignImageList(il, wx.IMAGE_LIST_SMALL)
        self.__do_layout()
        # Add some columns
        for col, text in enumerate(data.columns):
            self.list.InsertColumn(col, text)

        # add the rows
        for item in data.rows:
            index = self.list.InsertStringItem(sys.maxint, item[0])
            for col, text in enumerate(item[1:]):
                self.list.SetStringItem(index, col+1, text)

            # give each item a random image
            img = random.randint(0, il_max)
            self.list.SetItemImage(index, img, img)
                
        # set the width of the columns in various ways
        self.list.SetColumnWidth(0, 120)
        self.list.SetColumnWidth(1, wx.LIST_AUTOSIZE)
#        self.list.SetColumnWidth(2, wx.LIST_AUTOSIZE)
#        self.list.SetColumnWidth(3, wx.LIST_AUTOSIZE_USEHEADER)
        self.list.Bind(wx.EVT_CONTEXT_MENU, self.OnContextMenu)
#-------------------------------------------------------------------------------------------------------------
        event.Skip()



    def move(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `move' not implemented"
        event.Skip()

    def About(self, event): # wxGlade: MyFrame.<event_handler>
        description = "E-book Manage System"
        licence = "GPL v3"
        info = wx.AboutDialogInfo()
        info.SetVersion('1.0')
        info.SetName('PEMS')
        info.SetCopyright('(C) 2008 XiYouLinux')
        info.SetWebSite('http://www.xiyoulinux.cn')
        info.SetDescription(description)
        info.SetLicence(licence)
        info.AddDeveloper('XiYouLinux')
        wx.AboutBox(info)
        event.Skip()


# end of class MyFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()

