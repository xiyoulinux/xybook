#!/usr/bin/env python
# -*- coding: utf-8 -*-


import wx
import wx.grid
import os
import os.path
from os.path import join
import sys, glob, random
import data
import shutil
import time


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
           #启动画面splash
        RunPicture = wx.Image("./picture/run.png").ConvertToBitmap()
        wx.SplashScreen(RunPicture, wx.SPLASH_CENTRE_ON_SCREEN | wx.SPLASH_TIMEOUT,1000, None, -1)
        wx.Yield()
        wx.Frame.__init__(self, *args, **kwds)

        # Tool Bar
        self.vToolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.vToolbar)
        vTidy = self.vToolbar.AddLabelTool(wx.NewId(), u"整理", wx.Bitmap("./picture/tidy.jpeg", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        vSortbytype = self.vToolbar.AddLabelTool(wx.NewId(), u"按文件类型分组", wx.Bitmap("./picture/sortbytype.jpeg", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        vAbout = self.vToolbar.AddLabelTool(wx.NewId(), u"关于", wx.Bitmap("./picture/about.jpeg", wx.BITMAP_TYPE_ANY),wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        # Tool Bar end
        self.vStaticPath = wx.StaticText(self, -1, u"路径", style=wx.ALIGN_CENTRE)
        self.vInputPath = wx.TextCtrl(self, -1, "/")
        self.vStaticType = wx.StaticText(self, -1, u"文件类型\n", style=wx.ALIGN_CENTRE)
        self.vInputType = wx.TextCtrl(self, -1, "pdf odt chm doc")
        self.vBeginSearch = wx.Button(self, -1, u"开始搜索")
        self.vStaticKey = wx.StaticText(self, -1, u"请输入关键字", style=wx.ALIGN_CENTRE)
        self.vInputKey = wx.TextCtrl(self, -1, "")
        self.vBeginFind = wx.Button(self, -1, u"搜索关键字")
        self.vLeftListBox = wx.ListBox(self, -1, choices=[os.path.splitext(item)[0] for item in os.listdir(os.getcwd()) if os.path.splitext(item)[1] in ('.list',)])
 
        #listctrl
        il = wx.ImageList(16,16, True)
        for name in glob.glob("./picture/smicon??.png"):
            RunPicture = wx.Bitmap(name, wx.BITMAP_TYPE_PNG)
            il_max = il.Add(RunPicture)
        self.RightCtrl = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        self.RightCtrl.AssignImageList(il, wx.IMAGE_LIST_SMALL)
        # Add some columns
        for col, text in enumerate(data.columns):
            self.RightCtrl.InsertColumn(col, text)
        # Add the rows
        for item in data.rows:
            index = self.RightCtrl.InsertStringItem(sys.maxint, item[0])
            for col, text in enumerate(item[1:]):
                self.RightCtrl.SetStringItem(index, col+1, text)
        # give each item a random image
            img = random.randint(0, il_max)
            self.RightCtrl.SetItemImage(index, img, img)
        # set the width of the columns in various ways
        self.RightCtrl.SetColumnWidth(0, 200)
        self.RightCtrl.SetColumnWidth(1, 100)#wx.LIST_AUTOSIZE)
        self.RightCtrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
#        self.RightCtrl.SetColumnWidth(3, 400)
#end listctrl

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.move, vTidy)
        self.Bind(wx.EVT_TOOL, self.Sortbytype, vSortbytype)
        self.Bind(wx.EVT_TOOL, self.About, vAbout)
        self.Bind(wx.EVT_BUTTON, self.search, self.vBeginSearch)
        self.Bind(wx.EVT_BUTTON, self.find, self.vBeginFind)
        self.Bind(wx.EVT_CONTEXT_MENU, self.ListRightButton, self.vLeftListBox)
        self.Bind(wx.EVT_LISTBOX, self.ButtonClick, self.vLeftListBox)
        self.RightCtrl.Bind(wx.EVT_CONTEXT_MENU, self.OnContextMenu)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Python e-book Management System")
        self.SetSize((900, 650))
        self.vToolbar.Realize()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.vStaticPath, 1, wx.EXPAND, 0)
        sizer_4.Add(self.vInputPath, 6, wx.EXPAND, 0)
        sizer_4.Add(self.vStaticType, 1, wx.EXPAND, 0)
        sizer_4.Add(self.vInputType, 6, wx.EXPAND, 0)
        sizer_4.Add(self.vBeginSearch, 2, wx.ALL|wx.EXPAND, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 5)
        sizer_5.Add(self.vStaticKey, 3, wx.EXPAND, 0)
        sizer_5.Add(self.vInputKey, 15, wx.EXPAND, 0)
        sizer_5.Add(self.vBeginFind, 2, wx.EXPAND, 0)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 5)
        sizer_3.Add(self.vLeftListBox, 1, wx.EXPAND, 0)
        sizer_3.Add(self.RightCtrl, 4, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 20, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def ButtonClick(self, event):
        n=self.vLeftListBox.GetSelection()
        sampleList = [item for item in os.listdir(os.getcwd()) if os.path.splitext(item)[1] in ('.list',)]
        f = open(sampleList[n],'r')
 #       data.rows=[(os.path.splitext(os.path.basename(line))[0],'','',line)for line in f]
        data.rows=[(os.path.splitext(os.path.basename(line.split('        ')[0]))[0], line.split('        ')[-1],line.split('        ')[0])for line in f]

        f.close()
        #listctrl
        self.RightCtrl.Destroy()#销毁之前的窗口
        il = wx.ImageList(16,16, True)#随机显示图片
        for name in glob.glob("./picture/smicon??.png"):
            RunPicture = wx.Bitmap(name, wx.BITMAP_TYPE_PNG)
            il_max = il.Add(RunPicture)
        self.RightCtrl = wx.ListCtrl(self, -1, style=wx.LC_REPORT)#建立右边窗体
        self.RightCtrl.AssignImageList(il, wx.IMAGE_LIST_SMALL)#定义窗体显示类型
        self.__do_layout()#重新加载窗体布局
        # Add some columns
        for col, text in enumerate(data.columns):
            self.RightCtrl.InsertColumn(col, text)
        # add the rows
        for item in data.rows:
            index = self.RightCtrl.InsertStringItem(sys.maxint, item[0])
            for col, text in enumerate(item[1:]):
                self.RightCtrl.SetStringItem(index, col+1, text)
        # give each item a random image
            img = random.randint(0, il_max)
            self.RightCtrl.SetItemImage(index, img, img)                
        # set the width of the columns in various ways
        self.RightCtrl.SetColumnWidth(0, 200)
        self.RightCtrl.SetColumnWidth(1, 100)#wx.LIST_AUTOSIZE)
        self.RightCtrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
      #  self.RightCtrl.SetColumnWidth(3, 400)
        self.RightCtrl.Bind(wx.EVT_CONTEXT_MENU, self.OnContextMenu)
     #右键菜单
    def OnContextMenu(self, event):
        #定义id
        self.openitem = wx.NewId()
        self.detail = wx.NewId()
        self.moveitem = wx.NewId()
        self.add2list = wx.NewId()
        self.deleteitem=wx.NewId()
        # 创建菜单
        menu = wx.Menu()
        itemopenitem  = wx.MenuItem(menu, self.openitem, "打开文件")
        menu.AppendItem(itemopenitem)
        self.Bind(wx.EVT_MENU, self.Open,itemopenitem)
        itemdetail = wx.MenuItem(menu, self.detail, "详细信息")
        menu.AppendItem(itemdetail)
        itemmoveitem = wx.MenuItem(menu, self.moveitem, '移动')
        menu.AppendItem(itemmoveitem)
        self.Bind(wx.EVT_MENU, self.Move, itemmoveitem)
        itemaddtolist=wx.MenuItem(menu, self.add2list, '增加到组')
        menu.AppendItem(itemaddtolist)
        itemdeleteitem=wx.MenuItem(menu, self.deleteitem, '删除此项')
        menu.AppendItem(itemdeleteitem)
        
        
#        itemProperty.Enable(False)#默认让属性按钮变成无效状态
        self.itemid = self.RightCtrl.GetFirstSelected()
#       while itemid != -1:
#        #Do something
#           itemid = self.RightCtrl.GetNextSelected(itemid)
        if self.itemid == -1:#如果没有选中任何项
            itemdetail.Enable(False)
        else:
            itemdetail.Enable(True)
            itemmoveitem.Enable(True)
#        print itemid
        #弹出菜单
        self.Bind(wx.EVT_MENU, self.Detail, itemdetail)
       # self.Bind(wx.EVT_MENU, self.add2group,itemname)
        self.Bind(wx.EVT_MENU, self.addtolist,itemaddtolist)
        self.Bind(wx.EVT_MENU, self.Deleteitem,itemdeleteitem)
        self.PopupMenu(menu)
        #最后销毁前面创建的菜单
        menu.Destroy()

    def Detail(self,event):
        st = os.stat(data.rows[self.itemid][2])
        wx.MessageBox("路径:%s\n大小:%dbytes\n属主:%s  %s\n创建时间:%s\n最后访问:%s\n最后修改:%s"% (data.rows[self.itemid][2],st.st_size,st.st_uid,st.st_gid,time.ctime(st.st_ctime),time.ctime(st.st_atime),time.ctime(st.st_mtime)))
    def Deleteitem(self,event):
        if os.path.isfile(data.rows[self.itemid][2]):
            os.remove(data.rows[self.itemid][2])
            self.RightCtrl.DeleteItem(self.itemid)
            wx.MessageBox("删除成功")
        else:
            wx.MessageBox("文件不存在，请刷新列表")
            self.RightCtrl.DeleteItem(self.itemid)
    def addtolist(self,event):
        dialog = wx.TextEntryDialog(None,"请输入列表名","增加到列表","",style=wx.OK|wx.CANCEL)
        if dialog.ShowModal()==wx.ID_OK:
            name= dialog.GetValue()+".list"
        if os.path.isfile(name):
            f=open(name,'a')
            f.write(data.rows[self.itemid][2]+'          '+str(os.stat(data.rows[self.itemid][2])[6])+'\n')
            f.close()
        else:
            f=open(name,'w')
            f.write(data.rows[self.itemid][2]+'          '+str(os.stat(data.rows[self.itemid][2])[6])+'\n')
            f.close()
        self.vLeftListBox.Destroy()#销毁之前的窗口
        self.vLeftListBox = wx.ListBox(self, -1, choices=[os.path.splitext(item)[0] for item in os.listdir(os.getcwd()) if os.path.splitext(item)[1] in ('.list',)])
        self.__do_layout()#重新加载窗体布局
        self.Bind(wx.EVT_CONTEXT_MENU, self.ListRightButton, self.vLeftListBox)
        self.Bind(wx.EVT_LISTBOX, self.ButtonClick, self.vLeftListBox)



    def Open(self,event):
#    os.path.splitext(fname)[1]
        if os.path.splitext(data.rows[self.itemid][2])[1] in ['.doc','.eio']:
            cmd=str('eio'+' '+'\''+data.rows[self.itemid][2]+'\'')
        if os.path.splitext(data.rows[self.itemid][2])[1] in ['.pdf']:
            cmd=str('evince'+' '+'\''+data.rows[self.itemid][2]+'\'')
        if os.path.splitext(data.rows[self.itemid][2])[1] in ['.chm']:
            cmd=str('chmsee'+' '+'\''+data.rows[self.itemid][2]+'\'')
        if os.path.splitext(data.rows[self.itemid][2])[1] in ['.odt']:
            cmd=str('openoffice'+' '+'\''+data.rows[self.itemid][2]+'\'')
        os.system(cmd)
    def Move(self,event):
        self.dialog = wx.TextEntryDialog(None,"请输入目的路径","文件移动",os.path.expanduser('~/'),style=wx.OK|wx.CANCEL)
        if self.dialog.ShowModal()==wx.ID_OK:
            dstname = self.dialog.GetValue()
            if not os.path.isdir(dstname):
                wx.MessageBox("请输入绝对路径")
            if os.path.isfile(dstname+os.path.basename(data.rows[self.itemid][2])):
                wx.MessageBox("目的文件已存在")
            if not os.path.isfile(os.path.basename(data.rows[self.itemid][2])):
                wx.MessageBox("源文件不存在")
            else:
                shutil.move(data.rows[self.itemid][2], dstname)
            event.Skip()

    def Sortbytype(self,event):
        f = open('list.list','r')
        alllines=f.readlines()
        f.close()
        pdf=open('pdf.list','w')
        doc=open('doc.list','w')
        chm=open('chm.list','w')
        other=open('other.list','w')
        for line in alllines:
            if 'pdf' in  os.path.splitext(os.path.basename(line.split('        ')[0]))[1]:
                pdf.write(line)
            elif 'chm' in os.path.splitext(os.path.basename(line.split('        ')[0]))[1]:
                chm.write(line)
            elif 'doc' in os.path.splitext(os.path.basename(line.split('        ')[0]))[1]:
                doc.write(line)
            else:
                other.write(line)
        else:
            wx.MessageBox("分类成功！！！")
        pdf.close()
        chm.close()
        doc.close()
        other.close()
        self.vLeftListBox.Destroy()#销毁之前的窗口
        self.vLeftListBox = wx.ListBox(self, -1, choices=[os.path.splitext(item)[0] for item in os.listdir(os.getcwd()) if os.path.splitext(item)[1] in ('.list',)])
        self.__do_layout()#重新加载窗体布局
        self.Bind(wx.EVT_CONTEXT_MENU, self.ListRightButton, self.vLeftListBox)
        self.Bind(wx.EVT_LISTBOX, self.ButtonClick, self.vLeftListBox)


    def ListRightButton(self, event):
        menu = wx.Menu()
        AddGroup = wx.MenuItem(menu, wx.NewId(),"增加一个组")
        menu.AppendItem(AddGroup)
        DelGroup = wx.MenuItem(menu, wx.NewId(),"删除一个组")
        menu.AppendItem(DelGroup)
        self.Bind(wx.EVT_MENU, self.Add, AddGroup)
        self.Bind(wx.EVT_MENU, self.Del, DelGroup)
        self.PopupMenu(menu)        
        menu.Destroy()
        self.vLeftListBox.Destroy()#销毁之前的窗口
        self.vLeftListBox = wx.ListBox(self, -1, choices=[os.path.splitext(item)[0] for item in os.listdir(os.getcwd()) if os.path.splitext(item)[1] in ('.list',)])
        self.__do_layout()#重新加载窗体布局
        self.Bind(wx.EVT_CONTEXT_MENU, self.ListRightButton, self.vLeftListBox)
        self.Bind(wx.EVT_LISTBOX, self.ButtonClick, self.vLeftListBox)




    def Add(self, event):
        self.dialog = wx.TextEntryDialog(None,"请输入分类名称","创建分类","",style=wx.OK|wx.CANCEL)
        if self.dialog.ShowModal()==wx.ID_OK:
            newname = self.dialog.GetValue()+".list"
            f=open(newname, "w")
            f.close()
        event.Skip()



    def Del(self, event):
        self.dialog = wx.TextEntryDialog(None,"请输入分裂名称","删除分类","",style=wx.OK|wx.CANCEL)
        if self.dialog.ShowModal()==wx.ID_OK:
            newname = self.dialog.GetValue()+".list"
            os.remove(newname)
        event.Skip()


    def search(self, event): 
        path = self.vInputPath.GetValue()
        format = self.vInputType.GetValue()
        if path == '' :
            wx.MessageBox("请输入路径")
        if format == '':
            format = "pdf chm doc odt"
        if path != '' and format != '':
            trueformat=[]
            for item in format.split(' '):
                if item != '':
                    trueformat.append('.'+item)     
        self.fp = open("list.list",'w')   
        self.searcher(path.encode("utf-8"), trueformat)
        self.fp.close()
        event.Skip()

    def visitfile(self,fname,format):
        if os.path.splitext(fname)[1] in format:
             print >> self.fp,fname+'          '+str(os.stat(fname)[6])

    def visitor(self,arg,dirname,fname):
        for name in fname:
            fpath = os.path.join(dirname,name)
            if not os.path.isdir(fpath):
                self.visitfile(fpath,arg)
    def searcher(self,path, format): 
        os.path.walk(path,self.visitor,format)
                

    def find(self, event): 
        key = self.vInputKey.GetValue()
        fp = open("list.list", 'r')
        bo=[]
        count=0
        for line in fp.readlines():
            if key.lower() in os.path.splitext(os.path.basename(line))[0].decode("utf-8").lower():
                count+=1
                bo.append(line)
        if count==0:
             bo.append('对不起，您搜索的电子书不在列表中！！                            ')
        fp.close() 
        data.rows=[(os.path.splitext(os.path.basename(line.split('        ')[0]))[0], line.split('        ')[-1],line.split('        ')[0])for line in bo]



#listctrl
        self.RightCtrl.Destroy()
        il = wx.ImageList(16,16, True)
        for name in glob.glob("./picture/smicon??.png"):
            RunPicture = wx.Bitmap(name, wx.BITMAP_TYPE_PNG)
            il_max = il.Add(RunPicture)
        self.RightCtrl = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        self.RightCtrl.AssignImageList(il, wx.IMAGE_LIST_SMALL)
        self.__do_layout()
        # Add some columns
        for col, text in enumerate(data.columns):
            self.RightCtrl.InsertColumn(col, text)

        # add the rows
        for item in data.rows:
            index = self.RightCtrl.InsertStringItem(sys.maxint, item[0])
            for col, text in enumerate(item[1:]):
                self.RightCtrl.SetStringItem(index, col+1, text)

            # give each item a random image
            img = random.randint(0, il_max)
            self.RightCtrl.SetItemImage(index, img, img)
                
        # set the width of the columns in various ways
        self.RightCtrl.SetColumnWidth(0, 200)
        self.RightCtrl.SetColumnWidth(1, 100)#wx.LIST_AUTOSIZE)
        self.RightCtrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
       # self.RightCtrl.SetColumnWidth(3, 400)
        self.RightCtrl.Bind(wx.EVT_CONTEXT_MENU, self.OnContextMenu)


    def move(self, event): 
        dlg = MoveDialog()
        dlg.ShowModal()
        event.Skip()


    def About(self, event): 
        description = "E-book Manage System"
        licence = "GPL v3"
        info = wx.AboutDialogInfo()
        info.SetVersion('1.0')
        info.SetName('PEMS')
        info.SetCopyright('(C) 2008 XiYouLinux')
        info.SetWebSite('http://www.xiyoulinux.cn')
        info.SetDescription(description)
        info.SetLicence(licence)
        info.AddDeveloper('XiYouLinux')
        wx.AboutBox(info)
        event.Skip()


class MoveDialog(wx.Dialog):
    def __init__(self):
        wx.Dialog.__init__(self, None, -1, "Validators: validating")

        self.vTidyAbout_txt = """Welcome to XiYouLinux"""
        # Create the text controls
        self.vTidyAbout = wx.StaticText(self, -1, self.vTidyAbout_txt)
        self.vSrcPath  = wx.StaticText(self, -1, "列表名称")
        self.vDstPath  = wx.StaticText(self, -1, "目的路径")
        self.vSrcInput = wx.TextCtrl(self, -1, "")
        self.vDstInput = wx.TextCtrl(self, -1, "")
        # Use standard button IDs
        self.vOkay = wx.Button(self, wx.ID_OK)
        self.vOkay.SetDefault()
        self.vCancel = wx.Button(self, wx.ID_CANCEL)
        # Layout with sizers
        layout = wx.BoxSizer(wx.VERTICAL)
        layout.Add(self.vTidyAbout, 0, wx.ALL, 5)
        layout.Add(wx.StaticLine(self), 0, wx.EXPAND|wx.ALL, 5)

        fgs = wx.FlexGridSizer(2, 0, 5, 5)
        fgs.Add(self.vSrcPath, 0, wx.ALIGN_LEFT)
        fgs.Add(self.vSrcInput, 0, wx.EXPAND|wx.ALL)
        fgs.Add(self.vDstPath, 1, wx.ALIGN_LEFT)
        fgs.Add(self.vDstInput, 1, wx.EXPAND|wx.ALL)
        fgs.AddGrowableCol(1)
        layout.Add(fgs, 0, wx.EXPAND|wx.ALL, 5)

        btns = wx.StdDialogButtonSizer()
        btns.AddButton(self.vOkay)
        btns.AddButton(self.vCancel)
        btns.Realize()
        layout.Add(btns, 0, wx.EXPAND|wx.ALL, 5)
        self.Bind(wx.EVT_BUTTON, self.fTidyRealize,self.vOkay)
        self.SetSizer(layout)
        layout.Fit(self)  



    def fTidyRealize(self,event):
        SrcPath = self.vSrcInput.GetValue()
        fp = open(SrcPath,"r")
        for line in fp:
            print line.split('        ')[0].replace("\n","")
            DstPath = self.vDstInput.GetValue() + "/" + os.path.basename((line.split('        ')[0]))
            print DstPath.replace("\n","")
            shutil.move(line.split('        ')[0].replace("\n",""), DstPath.replace("\n",""))
        fp.close()
        event.Skip()
                

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
