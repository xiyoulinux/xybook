#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Wed Dec  3 03:13:36 2008

import wx
import wx.grid
import os
import os.path
import search
import sys, glob, random
import data
import shutil

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
		   #启动画面splash
        RunPicture = wx.Image("./picture/run.png").ConvertToBitmap()
        wx.SplashScreen(RunPicture, wx.SPLASH_CENTRE_ON_SCREEN | wx.SPLASH_TIMEOUT,1000, None, -1)
        wx.Yield()
        wx.Frame.__init__(self, *args, **kwds)

        # Tool Bar
        self.vToolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.vToolbar)
        vTidy = self.vToolbar.AddLabelTool(wx.NewId(), u"整理", wx.Bitmap("./picture/tidy.jpeg", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        vAbout = self.vToolbar.AddLabelTool(wx.NewId(), u"关于", wx.Bitmap("./picture/about.jpeg", wx.BITMAP_TYPE_ANY),wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        # Tool Bar end
        self.vStaticPath = wx.StaticText(self, -1, u"路径", style=wx.ALIGN_CENTRE)
        self.vInputPath = wx.TextCtrl(self, -1, "")
        self.vStaticType = wx.StaticText(self, -1, u"文件类型\n", style=wx.ALIGN_CENTRE)
        self.vInputType = wx.TextCtrl(self, -1, "")
        self.vBeginSearch = wx.Button(self, -1, u"开始搜索")
        self.vStaticKey = wx.StaticText(self, -1, u"请输入关键字", style=wx.ALIGN_CENTRE)
        self.vInputKey = wx.TextCtrl(self, -1, "")
        self.vBeginFind = wx.Button(self, -1, u"搜索关键字")
        self.vLeftListBox = wx.ListBox(self, -1, choices=[item for item in os.listdir(os.getcwd()) if os.path.splitext(item)[1] in ('.list',)])
 
		  #listctrl
        il = wx.ImageList(16,16, True)
        for name in glob.glob("./picture/smicon??.png"):
            RunPicture = wx.Bitmap(name, wx.BITMAP_TYPE_PNG)
            il_max = il.Add(RunPicture)
        self.RightCtrl = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        self.RightCtrl.AssignImageList(il, wx.IMAGE_LIST_SMALL)
        # Add some columns
        for col, text in enumerate(data.columns):
            self.RightCtrl.InsertColumn(col, text)
        # Add the rows
        for item in data.rows:
            index = self.RightCtrl.InsertStringItem(sys.maxint, item[0])
            for col, text in enumerate(item[1:]):
                self.RightCtrl.SetStringItem(index, col+1, text)
		# give each item a random image
            img = random.randint(0, il_max)
            self.RightCtrl.SetItemImage(index, img, img)
        # set the width of the columns in various ways
        self.RightCtrl.SetColumnWidth(0, 120)
        self.RightCtrl.SetColumnWidth(1, 200)#wx.LIST_AUTOSIZE)
#end listctrl

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.move, vTidy)
        self.Bind(wx.EVT_TOOL, self.About, vAbout)
        self.Bind(wx.EVT_BUTTON, self.search, self.vBeginSearch)
        self.Bind(wx.EVT_BUTTON, self.find, self.vBeginFind)
        self.Bind(wx.EVT_CONTEXT_MENU, self.ListRightButton, self.vLeftListBox)
        self.Bind(wx.EVT_LISTBOX, self.ButtonClick, self.vLeftListBox)
        self.RightCtrl.Bind(wx.EVT_CONTEXT_MENU, self.OnContextMenu)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Python E-book Manage System")
        self.SetSize((900, 650))
        self.vToolbar.Realize()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.vStaticPath, 1, wx.EXPAND, 0)
        sizer_4.Add(self.vInputPath, 6, wx.EXPAND, 0)
        sizer_4.Add(self.vStaticType, 1, wx.EXPAND, 0)
        sizer_4.Add(self.vInputType, 6, wx.EXPAND, 0)
        sizer_4.Add(self.vBeginSearch, 2, wx.ALL|wx.EXPAND, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 5)
        sizer_5.Add(self.vStaticKey, 3, wx.EXPAND, 0)
        sizer_5.Add(self.vInputKey, 15, wx.EXPAND, 0)
        sizer_5.Add(self.vBeginFind, 2, wx.EXPAND, 0)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 5)
        sizer_3.Add(self.vLeftListBox, 1, wx.EXPAND, 0)
        sizer_3.Add(self.RightCtrl, 4, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 20, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def ButtonClick(self, event):
        n=self.vLeftListBox.GetSelection()
        sampleList = [item for item in os.listdir(os.getcwd()) if os.path.splitext(item)[1] in ('.list',)]
        f = open(sampleList[n],'r')
        data.rows=[(os.path.splitext(os.path.basename(line))[0],line)for line in f]
        f.close()
		  #listctrl
        self.RightCtrl.Destroy()#销毁之前的窗口
        il = wx.ImageList(16,16, True)#随机显示图片
        for name in glob.glob("./picture/smicon??.png"):
            RunPicture = wx.Bitmap(name, wx.BITMAP_TYPE_PNG)
            il_max = il.Add(RunPicture)
        self.RightCtrl = wx.ListCtrl(self, -1, style=wx.LC_REPORT)#建立右边窗体
        self.RightCtrl.AssignImageList(il, wx.IMAGE_LIST_SMALL)#定义窗体显示类型
        self.__do_layout()#重新加载窗体布局
        # Add some columns
        for col, text in enumerate(data.columns):
            self.RightCtrl.InsertColumn(col, text)
        # add the rows
        for item in data.rows:
            index = self.RightCtrl.InsertStringItem(sys.maxint, item[0])
            for col, text in enumerate(item[1:]):
                self.RightCtrl.SetStringItem(index, col+1, text)
		# give each item a random image
            img = random.randint(0, il_max)
            self.RightCtrl.SetItemImage(index, img, img)                
        # set the width of the columns in various ways
        self.RightCtrl.SetColumnWidth(0, 80)
        self.RightCtrl.SetColumnWidth(1, wx.LIST_AUTOSIZE|wx.LIST_AUTOSIZE_USEHEADER)
        self.RightCtrl.SetColumnWidth(2, wx.LIST_AUTOSIZE|wx.LIST_AUTOSIZE_USEHEADER)
        self.RightCtrl.SetColumnWidth(3, wx.LIST_AUTOSIZE|wx.LIST_AUTOSIZE_USEHEADER)
        self.RightCtrl.Bind(wx.EVT_CONTEXT_MENU, self.OnContextMenu)
     #右键菜单
    def OnContextMenu(self, event):
#        if not hasattr(self, "popupStop"):
#            self.popupStop = wx.NewId()
#            self.popupPropery = wx.NewId()
#            self.Bind(wx.EVT_MENU, self.OnPopupStop, id = self.popupStop)
#            self.Bind(wx.EVT_MENU, self.OnPopupProperty, id = self.popupPropery)
           #定义id
        self.openitem = wx.NewId()
        self.detail = wx.NewId()
        self.moveitem = wx.NewId()
        self.addtogroup = wx.NewId()
        self.deleteitem=wx.NewId()
           # 创建菜单
        menu = wx.Menu()
        itemopenitem  = wx.MenuItem(menu, self.openitem, "打开文件")
        menu.AppendItem(itemopenitem)
        itemdetail  = wx.MenuItem(menu, self.detail, "详细信息")
        menu.AppendItem(itemdetail)
        itemmoveitem = wx.MenuItem(menu, self.moveitem, '移动')
        menu.AppendItem(itemmoveitem)
#        itemaddtogroup=wx.MenuItem(menu, self.addtogroup, '增加到组')
#        menu.AppendItem(itemaddtogroup)##--------------------------------此处添加级联菜单--所有组列表－－新建
		#创建扩展菜单
        imp = wx.Menu()
        dirbookList = [item for item in os.listdir(os.getcwd()) if os.path.splitext(item)[1] in ('.list',)]
        for i,item in enumerate(dirbookList):#将当前目录下的list文件加到扩展目录
            name='booklist'+'%d', i
            self.name=wx.NewId()#扩展菜单id
            name  = wx.MenuItem(imp, self.name, item)#扩展菜单项目
            imp.AppendItem(name)#增加扩展菜单
#        	imp.Append(-1, item)  
#        imp.Append(-1, "Import newsfeed list...")  
#        imp.Append(-1, "Import bookmarks...")  
#        imp.Append(-1, "Import mail...")
# #把这个菜单作为file的子菜单添加进来 用 AppenMenu() 方法  
        menu.AppendMenu(-1, "&增加到组", imp)  
   
        itemdeleteitem=wx.MenuItem(menu, self.deleteitem, '删除此项')
        menu.AppendItem(itemdeleteitem)##--------------------------------此处添加级联菜单－－从硬盘删除－－从列表删除
		
		
#        itemProperty.Enable(False)#默认让属性按钮变成无效状态
        itemid = self.RightCtrl.GetFirstSelected()
#		while itemid != -1:
#        #Do something
#        	itemid = self.RightCtrl.GetNextSelected(itemid)
        if itemid == -1:#如果没有选中任何项
            itemdetail.Enable(False)
        else:
            itemdetail.Enable(True)
            itemmoveitem.Enable(True)
 #       print itemid
        #到这里才弹出菜单
        self.Bind(wx.EVT_MENU, self.Detail, itemdetail)################怎样绑定？？？？？
        self.PopupMenu(menu)

        #最后注意销毁前面创建的菜单
        menu.Destroy()

    def Detail(self,event):
		print self.OnContextMenu.itemid
		print just_for_test
#-------------------------------------------------------------------------------------------------------------


    def ListRightButton(self, event):
        menu = wx.Menu()
        AddGroup = wx.MenuItem(menu, wx.NewId(),"增加一个组")
        menu.AppendItem(AddGroup)
        DelGroup = wx.MenuItem(menu, wx.NewId(),"删除一个组")
        menu.AppendItem(DelGroup)
        self.Bind(wx.EVT_MENU, self.Add, AddGroup)
        self.Bind(wx.EVT_MENU, self.Del, DelGroup)
        self.PopupMenu(menu)
        menu.Destroy()
    def Add(self, event):
        dlg = MyDialog()
        dlg.Bind(wx.EVT_BUTTON, dlg.add, dlg.okay)
        dlg.ShowModal()
        event.Skip()
    def Del(self, event):
        dlg = MyDialog()
        dlg.Bind(wx.EVT_BUTTON, dlg.delete, dlg.okay)
        dlg.ShowModal()
        event.Skip()


    def search(self, event): # wxGlade: MyFrame.<event_handler>
        path = self.vInputPath.GetValue()
        format = self.vInputType.GetValue()
        if path == '' :
            wx.MessageBox("请输入路径")
        if format == '':
        	format = "pdf chm doc odt"
        if path != '' and format != '':
            trueformat=[]
            for item in format.split(' '):
                if item != '':
                    trueformat.append('.'+item)
            search.searcher(path.encode("utf-8"), trueformat)
        event.Skip()

    def find(self, event): # wxGlade: MyFrame.<event_handler>
        key = self.vInputKey.GetValue()
        fp = open("list.list", 'r')
        bo=[]
        count=0
        for line in fp.readlines():
            if key.lower() in os.path.splitext(os.path.basename(line))[0].decode("utf-8").lower():
                count+=1
                bo.append(line)
        if count==0:
             bo.append('Sorry,the book does not exist!')
        fp.close() 
        data.rows=[(os.path.splitext(os.path.basename(line))[0],line)for line in bo]

#--------------------------------------------------------------------------------------------------------------
#listctrl
        self.RightCtrl.Destroy()
        il = wx.ImageList(16,16, True)
        for name in glob.glob("./picture/smicon??.png"):
            RunPicture = wx.Bitmap(name, wx.BITMAP_TYPE_PNG)
            il_max = il.Add(RunPicture)
        self.RightCtrl = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        self.RightCtrl.AssignImageList(il, wx.IMAGE_LIST_SMALL)
        self.__do_layout()
        # Add some columns
        for col, text in enumerate(data.columns):
            self.RightCtrl.InsertColumn(col, text)

        # add the rows
        for item in data.rows:
            index = self.RightCtrl.InsertStringItem(sys.maxint, item[0])
            for col, text in enumerate(item[1:]):
                self.RightCtrl.SetStringItem(index, col+1, text)

            # give each item a random image
            img = random.randint(0, il_max)
            self.RightCtrl.SetItemImage(index, img, img)
                
        # set the width of the columns in various ways
        self.RightCtrl.SetColumnWidth(0, 120)
        self.RightCtrl.SetColumnWidth(1, wx.LIST_AUTOSIZE_USEHEADER|wx.LIST_AUTOSIZE)
#        self.RightCtrl.SetColumnWidth(2, wx.LIST_AUTOSIZE)
#        self.RightCtrl.SetColumnWidth(3, wx.LIST_AUTOSIZE_USEHEADER)
        self.RightCtrl.Bind(wx.EVT_CONTEXT_MENU, self.OnContextMenu)
#-------------------------------


    def move(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `move' not implemented"
        event.Skip()

    def About(self, event): # wxGlade: MyFrame.<event_handler>
        description = "E-book Manage System"
        licence = "GPL v3"
        info = wx.AboutDialogInfo()
        info.SetVersion('1.0')
        info.SetName('PEMS')
        info.SetCopyright('(C) 2008 XiYouLinux')
        info.SetWebSite('http://www.xiyoulinux.cn')
        info.SetDescription(description)
        info.SetLicence(licence)
        info.AddDeveloper('XiYouLinux')
        wx.AboutBox(info)
        event.Skip()


# end of class MyFrame
class MyDialog(wx.Dialog):
    def __init__(self):
        wx.Dialog.__init__(self, None, -1, "Validators: validating")

        about_txt = """Welcome to XiYouLinux"""
        # Create the text controls
        about   = wx.StaticText(self, -1, about_txt)
        groupname  = wx.StaticText(self, -1, "组名")
        self.name = wx.TextCtrl(self, -1, "")
        # Use standard button IDs
        self.okay = wx.Button(self, wx.ID_OK)
        self.okay.SetDefault()
        self.cancel = wx.Button(self, wx.ID_CANCEL)
        # Layout with sizers
        layout = wx.BoxSizer(wx.VERTICAL)
        layout.Add(about, 0, wx.ALL, 5)
        layout.Add(wx.StaticLine(self), 0, wx.EXPAND|wx.ALL, 5)

        fgs = wx.FlexGridSizer(1, 0, 5, 5)
        fgs.Add(groupname, 0, wx.ALIGN_LEFT)
        fgs.Add(self.name, 0, wx.EXPAND)
        fgs.AddGrowableCol(1)
        layout.Add(fgs, 0, wx.EXPAND|wx.ALL, 5)

        btns = wx.StdDialogButtonSizer()
        btns.AddButton(self.okay)
        btns.AddButton(self.cancel)
        btns.Realize()
        layout.Add(btns, 0, wx.EXPAND|wx.ALL, 5)
        self.SetSizer(layout)
        layout.Fit(self)
    def add(self ,event):
    	newname = self.name.GetValue()+".list"
    	f=open(newname, "w")
    	f.close()
        event.Skip()
    def delete(self ,event):
    	newname = self.name.GetValue()+".list"
    	os.remove(newname)
        event.Skip()
   	
    	

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
